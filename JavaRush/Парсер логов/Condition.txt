7.	Парсер логов на Java



7.1.   Сегодня мы напишем парсер логов.
Лог файл имеет следующий формат:
ip username date event status
Где:
ip - ip адрес с которого пользователь произвел событие.
user - имя пользователя (одно или несколько слов разделенные пробелами).
date - дата события в формате day.month.year hour:minute:second.
event - одно из событий:
LOGIN - пользователь залогинился,
DOWNLOAD_PLUGIN - пользователь скачал плагин,
WRITE_MESSAGE - пользователь отправил сообщение,
SOLVE_TASK - пользователь попытался решить задачу,
DONE_TASK - пользователь решил задачу.
Для событий SOLVE_TASK и DONE_TASK существует дополнительный параметр,
который указывается через пробел, это номер задачи.
status - статус:
OK - событие выполнилось успешно,
FAILED - событие не выполнилось,
ERROR - произошла ошибка.
Пример строки из лог файла:
"146.34.15.5 Eduard Petrovich Morozko 05.01.2021 20:22:55 DONE_TASK 48 FAILED".
Записи внутри лог файла не обязательно упорядочены по дате, события могли произойти и быть записаны в лог в разной последовательности.
Все параметры разделены табуляцией ("\t").
Класс, который будет отвечать за парсинг логов называется LogParser.
1.1. Добавь в класс LogParser конструктор с параметром Path logDir, где logDir - директория с логами (логов может быть несколько, все они должны иметь расширение log).
1.2. Реализуй интерфейс IPQuery у класса LogParser:
1.2.1. Метод getNumberOfUniqueIPs(Date after, Date before) должен возвращать количество уникальных IP адресов за выбранный период. Здесь и далее, если в методе есть параметры Date after и Date before, то нужно возвратить данные касающиеся только данного периода (включая даты after и before).
Если параметр after равен null, то нужно обработать все записи, у которых дата меньше или равна before.
Если параметр before равен null, то нужно обработать все записи, у которых дата больше или равна after.
Если и after, и before равны null, то нужно обработать абсолютно все записи (без фильтрации по дате).
1.2.2. Метод getUniqueIPs() должен возвращать множество, содержащее все не повторяющиеся IP. Тип в котором будем хранить IP будет String.
1.2.3. Метод getIPsForUser() должен возвращать IP, с которых работал переданный пользователь.
1.2.4. Метод getIPsForEvent() должен возвращать IP, с которых было произведено переданное событие.
1.2.5. Метод getIPsForStatus() должен возвращать IP, события с которых закончилось переданным статусом.
Реализацию метода main() можешь менять по своему усмотрению.
Требования:
•	•
В классе LogParser должен быть создан конструктор public LogParser(Path logDir).
•	•
Класс LogParser должен поддерживать интерфейс IPQuery.
•	•
Метод getNumberOfUniqueIPs(Date, Date) должен возвращать количество уникальных IP адресов за выбранный период.
•	•
Метод getUniqueIPs(Date, Date) класса LogParser должен возвращать множество, содержащее все не повторяющиеся IP адреса за выбранный период.
•	•
Метод getIPsForUser(String, Date, Date) класса LogParser должен возвращать IP адреса, с которых работал переданный пользователь за выбранный период.
•	•
Метод getIPsForEvent(Event, Date, Date) класса LogParser должен возвращать IP адреса, с которых было произведено переданное событие за выбранный период.
•	•
Метод getIPsForStatus(Status, Date, Date) класса LogParser должен возвращать IP адреса, события с которых закончилось переданным статусом за выбранный период.




7.2.   Реализуй интерфейс UserQuery у класса LogParser:
2.1. Метод getAllUsers() должен возвращать всех пользователей.
2.2. Метод getNumberOfUsers() должен возвращать количество уникальных пользователей.
2.3. Метод getNumberOfUserEvents() должен возвращать количество уникальных событий от определенного пользователя.
2.4. Метод getUsersForIP() должен возвращать пользователей с определенным IP.
Несколько пользователей могут использовать один и тот же IP.
2.5. Метод getLoggedUsers() должен возвращать пользователей, которые делали логин.
2.6. Метод getDownloadedPluginUsers() должен возвращать пользователей, которые скачали плагин.
2.7. Метод getWroteMessageUsers() должен возвращать пользователей, которые отправили сообщение.
2.8. Метод getSolvedTaskUsers(Date after, Date before) должен возвращать пользователей, которые решали любую задачу.
2.9. Метод getSolvedTaskUsers(Date after, Date before, int task) должен возвращать пользователей, которые решали задачу с номером task.
2.10. Метод getDoneTaskUsers(Date after, Date before) должен возвращать пользователей, которые решили любую задачу.
2.11. Метод getDoneTaskUsers(Date after, Date before, int task) должен возвращать пользователей, которые решили задачу с номером task.
Требования:
•	•
Класс LogParser должен поддерживать интерфейс UserQuery.
•	•
Метод getAllUsers() должен возвращать множество содержащее всех пользователей.
•	•
Метод getNumberOfUsers(Date, Date) должен возвращать количество уникальных пользователей за выбранный период.
•	•
Метод getNumberOfUserEvents(String, Date, Date) должен возвращать количество уникальных событий от переданного пользователя за выбранный период.
•	•
Метод getUsersForIP(String, Date, Date) должен возвращать множество содержащее пользователей, которые работали с переданного IP адреса за выбранный период.
•	•
Метод getLoggedUsers(Date, Date) должен возвращать множество содержащее пользователей, которые были залогинены за выбранный период.
•	•
Метод getDownloadedPluginUsers(Date, Date) должен возвращать множество содержащее пользователей, которые скачали плагин за выбранный период.
•	•
Метод getWroteMessageUsers(Date, Date) должен возвращать множество содержащее пользователей, которые отправили сообщение за выбранный период.
•	•
Метод getSolvedTaskUsers(Date, Date) должен возвращать множество содержащее пользователей, которые решали любую задачу за выбранный период.
•	•
Метод getSolvedTaskUsers(Date, Date, int task) должен возвращать множество содержащее пользователей, которые решали задачу с номером task за выбранный период.
•	•
Метод getDoneTaskUsers(Date, Date) должен возвращать множество содержащее пользователей, которые решили любую задачу за выбранный период.
•	•
Метод getDoneTaskUsers(Date, Date, int task) должен возвращать множество содержащее пользователей, которые решили задачу с номером task за выбранный период.



7.3.   Реализуй интерфейс DateQuery у класса LogParser:
3.1. Метод getDatesForUserAndEvent() должен возвращать даты, когда определенный пользователь произвел определенное событие.
3.2. Метод getDatesWhenSomethingFailed() должен возвращать даты, когда любое событие не выполнилось (статус FAILED).
3.3. Метод getDatesWhenErrorHappened() должен возвращать даты, когда любое событие закончилось ошибкой (статус ERROR).
3.4. Метод getDateWhenUserLoggedFirstTime() должен возвращать дату, когда пользователь залогинился впервые за указанный период. Если такой даты в логах нет - null.
3.5. Метод getDateWhenUserSolvedTask() должен возвращать дату, когда пользователь впервые попытался решить определенную задачу. Если такой даты в логах нет - null.
3.6. Метод getDateWhenUserDoneTask() должен возвращать дату, когда пользователь впервые решил определенную задачу. Если такой даты в логах нет - null.
3.7. Метод getDatesWhenUserWroteMessage() должен возвращать даты, когда пользователь написал сообщение.
3.8. Метод getDatesWhenUserDownloadedPlugin() должен возвращать даты, когда пользователь скачал плагин.
Требования:
•	•
Класс LogParser должен поддерживать интерфейс DateQuery.
•	•
Метод getDatesForUserAndEvent(String, Event, Date, Date) должен возвращать множество дат, когда переданный пользователь произвел переданное событие за выбранный период.
•	•
Метод getDatesWhenSomethingFailed(Date, Date) должен возвращать множество дат, когда любое событие не выполнилось за выбранный период.
•	•
Метод getDatesWhenErrorHappened(Date, Date) должен возвращать множество дат, когда любое событие закончилось ошибкой за выбранный период.
•	•
Метод getDateWhenUserLoggedFirstTime(String, Date, Date) должен возвращать дату, когда переданный пользователь впервые залогинился за выбранный период. Если такой даты в логах нет - null.
•	•
Метод getDateWhenUserSolvedTask(String, int, Date, Date) должен возвращать дату, когда переданный пользователь впервые попытался решить задачу с номером task за выбранный период. Если такой даты в логах нет - null.
•	•
Метод getDateWhenUserDoneTask(String, int, Date, Date) должен возвращать дату, когда переданный пользователь впервые решил задачу с номером task за выбранный период. Если такой даты в логах нет - null.
•	•
Метод getDatesWhenUserWroteMessage(String, Date, Date) должен возвращать множество дат, когда переданный пользователь написал сообщение за выбранный период.
•	•
Метод getDatesWhenUserDownloadedPlugin(String, Date, Date) должен возвращать множество дат, когда переданный пользователь скачал плагин за выбранный период.




7.4.   Реализуй интерфейс EventQuery у класса LogParser:
4.1. Метод getNumberOfAllEvents() должен возвращать количество событий за указанный период.
4.2. Метод getAllEvents() должен возвращать все события за указанный период.
4.3. Метод getEventsForIP() должен возвращать события, которые происходили с указанного IP.
4.4. Метод getEventsForUser() должен возвращать события, которые инициировал
определенный пользователь.
4.5. Метод getFailedEvents() должен возвращать события, которые не выполнились.
4.6. Метод getErrorEvents() должен возвращать события, которые завершились ошибкой.
4.7. Метод getNumberOfAttemptToSolveTask() должен возвращать количество попыток
решить определенную задачу.
4.8. Метод getNumberOfSuccessfulAttemptToSolveTask() должен возвращать количество
успешных решений определенной задачи.
4.9. Метод getAllSolvedTasksAndTheirNumber() должен возвращать мапу (номер_задачи :
количество_попыток_решить_ее).
4.10. Метод getAllDoneTasksAndTheirNumber() должен возвращать мапу (номер_задачи :
сколько_раз_ее_решили).
Требования:
•	•
Класс LogParser должен поддерживать интерфейс EventQuery.
•	•
Метод getNumberOfAllEvents(Date, Date) должен возвращать количество уникальных событий за выбранный период.
•	•
Метод getAllEvents(Date, Date) должен возвращать множество уникальных событий за выбранный период.
•	•
Метод getEventsForIP(String, Date, Date) должен возвращать множество уникальных событий, которые происходили с переданного IP адреса за выбранный период.
•	•
Метод getEventsForUser(String, Date, Date) должен возвращать множество уникальных событий, которые произвел переданный пользователь за выбранный период.
•	•
Метод getFailedEvents(Date, Date) должен возвращать множество уникальных событий, у которых статус выполнения FAILED за выбранный период.
•	•
Метод getErrorEvents(Date, Date) должен возвращать множество уникальных событий, у которых статус выполнения ERROR за выбранный период.
•	•
Метод getNumberOfAttemptToSolveTask(int, Date, Date) должен возвращать количество попыток решить задачу с номером task за выбранный период.
•	•
Метод getNumberOfSuccessfulAttemptToSolveTask(int, Date, Date) должен возвращать количество успешных решений задачи с номером task за выбранный период.
•	•
Метод getAllSolvedTasksAndTheirNumber(Date, Date) должен возвращать мапу (номер_задачи : количество_попыток_решить_ее) за выбранный период.
•	•
Метод getAllDoneTasksAndTheirNumber(Date, Date) должен возвращать мапу (номер_задачи : сколько_раз_ее_решили) за выбранный период.





7.5.   Как ты заметил существует огромное количество комбинаций параметров для выбора определенных записей из лог файла. Покрыть их все соответствующими методами дело не благодарное. Поэтому мы реализуем свой язык запросов (QL).
Пример запроса:
get ip for user = "Vasya"
Такой запрос должен будет вернуть все IP адреса, с которых пользователь Vasya что-то делал и это отображено в нашем логе. Представь, как будет удобно ввести запрос в консоль и получить необходимую информацию из лога.
5.1. Реализуй интерфейс QLQuery у класса LogParser. Метод execute() пока должен поддерживать только следующие запросы:
5.1.1. get ip
5.1.2. get user
5.1.3. get date
5.1.4. get event
5.1.5. get status
Пример: Вызов метода execute("get ip") должен вернуть Set<String>, содержащий все уникальные IP из лога (это будет: 127.0.0.1, 12.12.12.12, 146.34.15.5, 192.168.100.2 для тестового файла). Аналогично должны работать и другие запросы.
Реальные объекты в возвращаемом множестве должны быть типа String для запросов ip и user, для запроса date - тип объектов Date, для event и status - Event и Status соответственно.
Требования:
•	•
Класс LogParser должен поддерживать интерфейс QLQuery.
•	•
Вызов метода execute("get ip") класса LogParser должен возвращать множество (Set<String>) содержащее все уникальные IP адреса.
•	•
Вызов метода execute("get user") класса LogParser должен возвращать множество (Set<String>) содержащее всех уникальных пользователей.
•	•
Вызов метода execute("get date") класса LogParser должен возвращать множество (Set<Date>) содержащее все уникальные даты.
•	•
Вызов метода execute("get event") класса LogParser должен возвращать множество (Set<Event>) содержащее все уникальные события.
•	•
Вызов метода execute("get status") класса LogParser должен возвращать множество (Set<Status>) содержащее все уникальные статусы.




7.6.   Давай добавим поддержку параметра запроса в наш QL.
Примеры запросов с параметром:
1) get ip for user = "Vasya"
2) get user for event = "DONE_TASK"
3) get event for date = "03.01.2014 03:45:23"
Общий формат запроса с параметром:
get field1 for field2 = "value1"
Где: field1 - одно из полей: ip, user, date, event или status;
field2 - одно из полей: ip, user, date, event или status;
value1 - значение поля field2.
Алгоритм обработки запроса следующий: просматриваем записи в логе, если поле field2 имеет значение value1, то добавляем поле field1 в множество, которое затем будет возвращено методом execute.
Пример:
Вызов метода execute("get event for date = "30.01.2014 12:56:22″") должен вернуть Set<Event>, содержащий только одно событие SOLVE_TASK. Какая именно задача решалась возвращать не нужно.
Поддержка старого формата запросов должна сохраниться.
Требования:
•	•
Вызов метода execute с параметром "get ip for user = "[any_user]"" должен возвращать множество уникальных IP адресов, с которых работал пользователь с именем [any_user].
•	•
Вызов метода execute с параметром "get ip for date = "[any_date]"" должен возвращать множество уникальных IP адресов, события с которых произведены в указанное время [any_date].
•	•
Вызов метода execute с параметром "get ip for event = "[any_event]"" должен возвращать множество уникальных IP адресов, у которых событие равно [any_event].
•	•
Вызов метода execute с параметром "get ip for status = "[any_status]"" должен возвращать множество уникальных IP адресов, события с которых закончились со статусом [any_status].
•	•
Вызов метода execute с параметром "get user for ip = "[any_ip]"" должен возвращать множество уникальных пользователей, которые работали с IP адреса [any_ip].
•	•
Вызов метода execute с параметром "get user for date = "[any_date]"" должен возвращать множество уникальных пользователей, которые произвели любое действие в указанное время [any_date].
•	•
Вызов метода execute с параметром "get user for event = "[any_event]"" должен возвращать множество уникальных пользователей, у которых событие равно [any_event].
•	•
Вызов метода execute с параметром "get user for status = "[any_status]"" должен возвращать множество уникальных пользователей, у которых статус равен [any_status].
•	•
Вызов метода execute с параметром "get date for ip = "[any_ip]"" должен возвращать множество уникальных дат, за которые с IP адреса [any_ip] произведено любое действие.
•	•
Вызов метода execute с параметром "get date for user = "[any_user]"" должен возвращать множество уникальных дат, за которые пользователь [any_user] произвел любое действие.
•	•
Вызов метода execute с параметром "get date for event = "[any_event]"" должен возвращать множество уникальных дат, за которые произошло событие равно [any_event].
•	•
Вызов метода execute с параметром "get date for status = "[any_status]"" должен возвращать множество уникальных дат, за которые произошло любое событие со статусом [any_status].
•	•
Вызов метода execute с параметром "get event for ip = "[any_ip]"" должен возвращать множество уникальных событий, которые произошли с IP адреса [any_ip].
•	•
Вызов метода execute с параметром "get event for user = "[any_user]"" должен возвращать множество уникальных событий, которые произвел пользователь [any_user].
•	•
Вызов метода execute с параметром "get event for date = "[any_date]"" должен возвращать множество уникальных событий, которые произошли во время [any_date].
•	•
Вызов метода execute с параметром "get event for status = "[any_status]"" должен возвращать множество уникальных событий, которые завершены со статусом [any_status].
•	•
Вызов метода execute с параметром "get status for ip = "[any_ip]"" должен возвращать множество уникальных статусов, которые произошли с IP адреса [any_ip].
•	•
Вызов метода execute с параметром "get status for user = "[any_user]"" должен возвращать множество уникальных статусов, которые произвел пользователь [any_user].
•	•
Вызов метода execute с параметром "get status for date = "[any_date]"" должен возвращать множество уникальных статусов, которые произошли во время [any_date].
•	•
Вызов метода execute с параметром "get status for event = "[any_event]"" должен возвращать множество уникальных статусов, у которых событие равно [any_event].
•	•
Поддержка старого формата запросов должна сохраниться.




7.7.   Теперь добавим поддержку дополнительного параметра запроса в наш QL.
Дополнительный параметр будет отвечать за диапазон дат, которые нас интересуют.
Пример запроса:
get ip for user = "Eduard Petrovich Morozko" and date between "11.12.2013 0:00:00" and "03.01.2014 23:59:59".
Ожидаемый результат:
Set<String> с записями: 127.0.0.1 и 146.34.15.5.
Общий формат запроса:
get field1 for field2 = "value1" and date between "after" and "before"
Дополнительным параметром может быть только интервал дат, который нас интересует.
Поддержка старых форматов запросов должна сохраниться.
Требования:
•	•
Вызов метода execute с параметром "get ip for user = "[any_user]" and date between "[after]" and "[before]"" должен возвращать множество уникальных IP адресов, с которых работал пользователь с именем [any_user] в период между датами [after] и [before].
•	•
Вызов метода execute с параметром "get ip for date = "[any_date]" and date between "[after]" and "[before]"" должен возвращать множество уникальных IP адресов, события с которых произведены в указанное время [any_date] в период между датами [after] и [before].
•	•
Вызов метода execute с параметром "get ip for event = "[any_event]" and date between "[after]" and "[before]"" должен возвращать множество уникальных IP адресов, у которых событие равно [any_event] в период между датами [after] и [before].
•	•
Вызов метода execute с параметром "get ip for status = "[any_status]" and date between "[after]" and "[before]"" должен возвращать множество уникальных IP адресов, события с которых закончились со статусом [any_status] в период между датами [after] и [before].
•	•
Вызов метода execute с параметром "get user for ip = "[any_ip]" and date between "[after]" and "[before]"" должен возвращать множество уникальных пользователей, которые работали с IP адреса [any_ip] в период между датами [after] и [before].
•	•
Вызов метода execute с параметром "get user for date = "[any_date]" and date between "[after]" and "[before]"" должен возвращать множество уникальных пользователей, которые произвели любое действие в указанное время [any_date] в период между датами [after] и [before].
•	•
Вызов метода execute с параметром "get user for event = "[any_event]" and date between "[after]" and "[before]"" должен возвращать множество уникальных пользователей, у которых событие равно [any_event] в период между датами [after] и [before].
•	•
Вызов метода execute с параметром "get user for status = "[any_status]" and date between "[after]" and "[before]"" должен возвращать множество уникальных пользователей, у которых статус равен [any_status] в период между датами [after] и [before].
•	•
Вызов метода execute с параметром "get date for ip = "[any_ip]" and date between "[after]" and "[before]"" должен возвращать множество уникальных дат, за которые с IP адреса [any_ip] произведено любое действие в период между датами [after] и [before].
•	•
Вызов метода execute с параметром "get date for user = "[any_user]" and date between "[after]" and "[before]"" должен возвращать множество уникальных дат, за которые пользователь [any_user] произвел любое действие в период между датами [after] и [before].
•	•
Вызов метода execute с параметром "get date for event = "[any_event]" and date between "[after]" and "[before]"" должен возвращать множество уникальных дат, за которые произошло событие равно [any_event] в период между датами [after] и [before].
•	•
Вызов метода execute с параметром "get date for status = "[any_status]" and date between "[after]" and "[before]"" должен возвращать множество уникальных дат, за которые произошло любое событие со статусом [any_status] в период между датами [after] и [before].
•	•
Вызов метода execute с параметром "get event for ip = "[any_ip]" and date between "[after]" and "[before]"" должен возвращать множество уникальных событий, которые произошли с IP адреса [any_ip] в период между датами [after] и [before].
•	•
Вызов метода execute с параметром "get event for user = "[any_user]" and date between "[after]" and "[before]"" должен возвращать множество уникальных событий, которые произвел пользователь [any_user] в период между датами [after] и [before].
•	•
Вызов метода execute с параметром "get event for date = "[any_date]" and date between "[after]" and "[before]"" должен возвращать множество уникальных событий, которые произошли во время [any_date] в период между датами [after] и [before].
•	•
Вызов метода execute с параметром "get event for status = "[any_status]" and date between "[after]" and "[before]"" должен возвращать множество уникальных событий, которые завершены со статусом [any_status] в период между датами [after] и [before].
•	•
Вызов метода execute с параметром "get status for ip = "[any_ip]" and date between "[after]" and "[before]"" должен возвращать множество уникальных статусов, которые произошли с IP адреса [any_ip] в период между датами [after] и [before].
•	•
Вызов метода execute с параметром "get status for user = "[any_user]" and date between "[after]" and "[before]"" должен возвращать множество уникальных статусов, которые произвел пользователь [any_user] в период между датами [after] и [before].
•	•
Вызов метода execute с параметром "get status for date = "[any_date]" and date between "[after]" and "[before]"" должен возвращать множество уникальных статусов, которые произошли во время [any_date] в период между датами [after] и [before].
•	•
Вызов метода execute с параметром "get status for event = "[any_event]" and date between "[after]" and "[before]"" должен возвращать множество уникальных статусов, у которых событие равно [any_event] в период между датами [after] и [before].
•	•
Поддержка формата запросов из задания 5 должна сохраниться.
•	•
Поддержка формата запросов из задания 6 должна сохраниться.





7.8.   Ты реализовал парсер логов из разных файлов.
Помимо парсера, ты реализовал свой собственный язык запросов. Он нужен для того, что бы минимизировать количество методов. Строчка в нашем лог-файле содержала всего 5 параметров плюс один вариативный параметр.
При количестве параметров запроса два - это 25 возможный комбинаций, соответственно, что бы сделать любую выборку нужно реализовать 25 методов. Теперь представь, что параметров в строчке лог-файла не 5, а 10. И количество параметров запроса не 2, а 3. Уже нужно было бы написать 10 * 10 * 10 = 1000 методов.
Чем сложнее лог - тем больше времени разработчик может себе сэкономить.
Из рекомендаций и возможных улучшений можно реализовать запрос с количеством параметров 3, например такой:
get field1 for field2 = "value1" and field3 = "value2" and date between "after" and "before"
Из архитектурных улучшений в этой программе уместно использовать паттерн команда (для получения значения полей field, действуя единообразно). Реализуй его, если еще не сделал этого.
Требования:
•	•
Поздравляю! Ты написал собственный парсер и свой язык запросов
