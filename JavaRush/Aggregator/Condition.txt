8.	Агрегатор на Java


8.1.   Пришло время немного поработать с информацией в инете. В этом задании ты будешь писать агрегатор java вакансий.
Что у нас должно быть?
Должен быть список сайтов, на которых мы ищем вакансии.
Для начала возьмем https://grc.ua/ и https://hh.ru/, потом уже добавим другие сайты поиска работы.
Это один и тот же сайт, только в разных доменах.
С чего же нужно начать реализацию? Конечно же с метода main : )
1. Создай класс Aggregator с методом main.
2. Создай пакет model, в нем создай класс Provider.
Этот класс будет обобщать способ получения данных о вакансиях.
3. Т.к. для каждого сайта будет выполняться одинаковый сценарий, то будет паттерн Стратегия. Почитай про него в инете на вики.
В пакете model создай интерфейс Strategy.
Он будет отвечать за получение данных с сайта.
4. В класс Provider добавь приватное поле Strategy strategy. Добавь конструктор с этим полем и сеттер.

Требования:

•	Создай класс Aggregator с методом main.

•	Создай пакет model, и в нем создай класс Provider.

•	В пакете model создай интерфейс Strategy.

•	В класс Provider добавь приватное поле Strategy strategy. Добавь конструктор с этим полем и сеттер.






8.2.   1. В корне задачи создай класс Controller, в нем будет содержаться логика работы программы.
2. В Controller добавь публичный конструктор, который будет принимать столько провайдеров, сколько в него передадут для обработки (аргументы переменной длины - varargs).
Сохрани их в приватное поле providers.
Помнишь, как это делать? Нужно нажать на аргументе конструктора Alt+Enter, выбрать Create Field for Parameter 'providers'.
3. Если провайдеры не переданы в конструктор контроллера, то брось IllegalArgumentException.
4. Создай метод toString() в классе Controller (Alt+Insert -> toString()) со стандартной реализацией (должен выводить поле providers).
5. В методе main() класса Aggregator:
5.1. Создай провайдер. Поскольку реализации стратегии (Strategy) пока нет, то в конструктор провайдера передай null.
5.2. Создай контроллер с этим провайдером.
5.3. В методе main() выведи в консоль созданный экземпляр Controller-а.

Требования:

•	Создай класс Controller.

•	К классу Controller добавь конструктор, который принимает столько провайдеров, сколько в него передадут для обработки.

•	В конструкторе сохрани все провайдеры в поле providers. Если ни одного провайдера передано не было - брось IllegalArgumentException

•	В классе Controller создай метод toString со стандартной реализацией.

•	В методе main создай провайдер и контроллер с этим провайдером.

•	В методе main выведи в консоль созданный экземпляр контроллера.






8.3.   Начиная с этого задания ты начнешь писать логику получения данных с сайта.
Эта логика будет полностью сосредоточена в классах, реализующих интерфейс Strategy.
Провайдер в данном случае выступает в качестве контекста, если мы говорим о паттерне Стратегия.
В провайдере должен быть метод, который будет вызывать метод стратегии для выполнения главной операции.
Этот метод будет возвращать все java вакансии с выбранного сайта (ресурса).
1. В корне задачи создай пакет vo (value object), в котором создай класс Vacancy.
Этот класс будет хранить данные о вакансии.
2. В Provider создай публичный метод List<Vacancy> getJavaVacancies(String searchString). Оставь пока метод пустым.
3. Что есть у вакансии?
Название, зарплата, город, название компании, название сайта, на котором вакансия найдена, ссылка на вакансию. В классе Vacancy создай соответствующие приватные строковые поля: title, salary, city, companyName, siteName, url.
4. Создай геттеры и сеттеры для всех полей класса Vacancy.
5. В пакете model создай класс HHStrategy, реализующий интерфейс Strategy.
Этот класс будет реализовывать конкретную стратегию работы с сайтом поиска работы (https://grc.ua/ и https://hh.ru/).

Требования:

•	В корне задачи создай пакет vo, в нем создай класс Vacancy.

•	В классе Provider создай пустой публичный метод getJavaVacancies(String searchString), который будет возвращать список вакансий.

•	В классе Vacancy создай приватные строковые поля: title, salary, city, companyName, siteName, url.

•	К полям в классе Vacancy создай геттеры и сеттеры.

•	В пакете model создай класс HHStrategy, который реализует интерфейс Strategy.






8.4.   Открой сайт поиска работы - https://grc.ua/ или https://hh.ru/
В строке поиска набери "java Kiev", снизу перейди на вторую страницу, т.к. урлы часто отличаются на первой странице и далее.
У меня получилась такая ссылка:
https://grc.ua/search/vacancy?text=java+Kiev&page=1 и https://hh.ru/search/vacancy?text=java+Kiev&page=1
Из этого следует, что
1) если тебе нужно будет фильтровать по городу, то ты добавишь его после слова java, разделив их знаком "+",
2) нумерация страниц начинается с 0.
Итак, ссылка будет примерно такой:
https://grc.ua/search/vacancy?text=java+ADDITIONAL_VALUE&page=PAGE_VALUE
1. Из полученной ссылки в HHStrategy создай приватную строковую константу URL_FORMAT, которая будет передаваться в String.format().
В результате подстановки константы URL_FORMAT в String.format(URL_FORMAT, "Kiev", 3) с такими параметрами, результат должен быть таким:
"https://grc.ua/search/vacancy?text=java+Kiev&page=3"
или
"https://hh.ru/search/vacancy?text=java+Kiev&page=3"
Для этого скопируй ссылку в код и нажми на ней нужную комбинацию клавиш.
Ctrl+Alt+C(Constant) - создание констант,
Ctrl+Alt+M(Method) - создание методов,
Ctrl+Alt+V(Variable) - создание переменных.
2. Тебе нужно программно получить исходный код страницы. Это HTTP запрос. Тебе понадобится Java HTML Parser.
Хороший парсер jsoup, будешь использовать его.
Мы будем использовать версию 1.9.2.
3. Скачать и подключить новые либы можно так:
В IDEA открой Project Structure (в меню File).
Слева выбери Project Settings -> Libraries, в окошке справа сверху нажми "+".
Выбери "From Maven...". В окне поиска введи "org.jsoup:jsoup:1.9.2". Поставь галочку на "Download to:" и выбери куда скачать либу. Также поставь галочки на "Transitive dependencies", "Sources". В окне Choose Modules выбери модуль 4.JavaCollections.
4. Прочитай дополнительный материал к лекции в Сообществе.
Лёгкий парсинг HTML с помощью jsoup
3 примера как разобрать HTML-файл в Java используя Jsoup

Требования:

•	В классе HHStrategy создай приватную строковую константу URL_FORMAT.

•	Результат команды String.format(URL_FORMAT, String, int) должен генерироваться согласно заданию.

•	Для выполнения дальнейших указаний, подключи библиотеку jsoup версии 1.9.2 (проверка этого требования не выполняется).






8.5.   1. Добавь в интерфейс Strategy метод getVacancies(String searchString), который будет возвращать список вакансий.
2. Поправь ошибки в классе HHStrategy.
3. Вернись в метод getJavaVacancies класса Provider, реализуй его логику из расчета, что всех данных хватает.
4. Давай попробуем запустить и посмотреть, как работает наша программа.
В методе main вместо вывода на экран напиши controller.scan();
Воспользуйся подсказкой IDEA и создай метод.
Внутри метода пройдись по всем провайдерам и собери с них все вакансии, добавь их в список. Выведи количество вакансий в консоль.
5. Исправь NPE, если появляется это исключение (поставь заглушку, например Collections.emptyList()).

Требования:

•	В интерфейсе Strategy добавь метод getVacancies(String searchString).

•	Обнови класс HHStrategy, что бы в нем не было ошибок.

•	В классе Provider реализуй логику метода getJavaVacancies.

•	В методе main вместо вывода на экран добавь вызов controller.scan(). Реализуй этот метод согласно заданию.

•	Вызов main не должен кидать NullPointerException. Поставь заглушки в необходимых местах.









8.6.   1. В папке куда ты скачал либу org.jsoup:jsoup:1.9.2 из maven репозитория, найди jar-архив jsoup-1.9.2.jar или jsoup-1.9.2-sources.jar. В нем найди пакет examples, посмотри классы в этом пакете.
2. По аналогии с реализацией в примерах кода jsoup - реализуй коннекшен к урлу сайта поиска работы методом GET.
Это нужно сделать в методе getVacancies класса HHStrategy.
Подсказка: получится объект класса Document.
3. Поставь брекпоинт сразу после коннекшена. Запусти программу в дебаг моде.
Скопируй полученное значение document.html() в буфер.
4. Создай файл с расширением html где-то в корне проекта.
Вставь содержимое буфера в этот файл и отформатируй его Ctrl+Alt+L, IDEA умеет форматировать HTML.
Ура! Это код страницы HTML :)
5. Реализуй в вакансии (Vacancy) методы equals/hashCode.
Alt+Insert - equals() and hashCode().

Требования:

•	В методе getVacancies класса HHStrategy реализуй коннекшен к урлу сайта поиска работы методом GET.

•	Скопируй html код полученной странички себе в файл для дальнейшего анализа (проверка этого требования не выполняется).

•	В классе Vacancy сгенерируй с помощью IDE методы equals() и hashCode().






8.7.   Чтобы сайт поиска работы знал, кто к нему коннектится, проставим Request Headers в наш запрос.
Для разработчиков созданы инструменты, которые показывают различную информацию про запросы.
Я расскажу тебе про два инструмента.
***Chrome****
1. В браузере Хром пойди в Меню - Инструменты - Инструменты разработчика, или нажми Ctrl+Shift+I
2. В браузерной строке набери URL https://grc.ua/search/vacancy?text=java+Kiev или https://hh.ru/search/vacancy?text=java+Kiev
3. Перейди на табу Network(Сеть), запрашиваемый URL должен быть в самом верху.
У него метод отправки данных GET (еще есть POST), статус 200(успешно)
4. Выбери его, откроется информация о страничке.
5. Найди Request Headers(Заголовки запроса)
***FireFox***
1. В браузере FireFox зайди в Меню - Веб-разработка - Инструменты разработчика, или нажми Ctrl+Shift+I
2. В браузерной строке набери URL https://grc.ua/search/vacancy?text=java+Kiev или https://hh.ru/search/vacancy?text=java+Kiev
3. Перейди на табу Network(Сеть), запрашиваемый URL должен быть в самом верху.
4. Выбери его, откроется информация о страничке.
5. Найди Request Headers(Заголовки запроса)
Добавь в коннекшен к урлу сайта поиска работы userAgent и referrer.

Требования:

•	В методе getVacancies класса HHStrategy после создания коннекшена добавь заголовок userAgent.

•	В методе getVacancies класса HHStrategy после создания коннекшена добавь заголовок referrer.






8.8.   Запусти снова программу в дебаг моде.
Скопируй полученное значение document.html() в созданный ранее html файл.
Отформатируй его и найди теги с вакансиями.
Почитай в Сообществе дополнительный материал к лекции про селекторы атрибута.
ВНИМАНИЕ: ОСОБЕННОСТИ ТЕСТИРОВАНИЯ!
HTML код странички ХэдХантера может меняться, чтобы эта задача продолжила работать стабильно не меняя тесты воспользуйся закешированной версией https://javarush.ru/testdata/big28data.html
Это только для этого пункта, в следующих заданиях используй реальные страницы.
1. В классе HHStrategy создай protected метод Document getDocument(String searchString, int page) throws IOException.
2. Реализуй следующую логику метода getVacancies в классе HHStrategy:
2.1. Подключись к закешированной страничке ХэдХантера используя метод getDocument, нумерация начинается с 0.
2.2. Получи список элементов с атрибутом по имени "data-qa" и значением "vacancy-serp__vacancy". Должно быть до 20 вакансий на странице.
2.3. Если данные в списке из п.2.2 есть, то для каждого элемента:
2.3.1. создать вакансию и заполнить все ее данные, получив данные из текущего элемента.
Если тег с зарплатой присутствует, то заполнить и поле salary, иначе инициализировать поле пустой строкой.
site и url нужно взять из атрибута со значением "vacancy-serp__vacancy-title".
2.4. Выполнить п.2.1-2.3 для следующей страницы ХэдХантера.
2.5. Если закончились страницы с вакансиями, то выйти из цикла.
Исключения игнорировать.
Все вакансии добавить в общий список и вернуть в качестве результата метода.
Подсказка по зарплате:
Поиграйся с URL_FORMAT, добавь туда еще один параметр, чтобы получить вакансии с зарплатами.
Проанализируй полученный html и найди тег для зарплаты.
Не забудь потом вернуть значение URL_FORMAT обратно.

Требования:

•	В классе HHStrategy создай protected метод getDocument(String searchString, int page). Перенеси туда логику по получению объекта html-страницы Document.

•	Метод getVacancies класса HHStrategy должен получать содержимое страниц с помощью метода getDocument. Начни с 0 страницы.

•	Из объекта Document получи список html-элементов с атрибутом по имени "data-qa" и значением "vacancy-serp__vacancy". Для каждого элемента создай объект вакансии и добавь его в возвращающий методом список.

•	Нужно последовательно обработать все страницы результатов поиска. Как только страницы с вакансиями закончатся, прерви цикл и верни список найденных вакансий.

•	У каждой вакансии должно быть заполнено поле title полученными из html-элемента данными о названии вакансии.

•	У каждой вакансии должно быть заполнено поле url полученной из html-элемента ссылкой на вакансию.

•	У каждой вакансии должно быть заполнено поле city полученными из html-элемента данными о городе.

•	У каждой вакансии должно быть заполнено поле companyName полученными из html-элемента данными о компании.

•	У каждой вакансии должно быть заполнено поле siteName значением сайта, на котором вакансия была найдена.

•	Поле salary у вакансии должно быть заполнено, если в html-элементе присутствовал тег с зарплатой. Иначе поле должно быть инициализировано пустой строкой.

•	Если ты менял значение поля URL_FORMAT, не забудь вернуть его обратно.






8.9.   Пришло время чуток порефакторить код.
Почитай в инете про паттерн MVC(Model-View-Controller).
Кратко - используя View(вид) пользователь генерирует события, которые обрабатывает контроллер.
Контроллер принимает решение, какие данные ему нужны, и обращается к нужной модели.
Модель получает данные, например, из БД или из URL-а. Потом модель передает данные во View.
View отображает данные.
1. Создай пакет view, в котором создай интерфейс View с двумя методами:
void update(List<Vacancy> vacancies);
void setController(Controller controller);
2. В пакете view создай класс HtmlView, реализующий интерфейс View.
3. В классе HtmlView создай приватное поле controller типа Controller, используй его для реализации одного из методов интерфейса.

Требования:

•	В корне задачи создай новый пакет view, в нем создай интерфейс View.

•	Интерфейс View должен содержать два метода согласно заданию.

•	В пакете view создай новый класс HtmlView, который реализует View.

•	В классе HtmlView создай приватное поле controller типа Controller и для его инициализации реализуй один из методов интерфейса.





8.10.   У View есть метод update, в него передается список вакансий для отображения.
Очевидно, что этот метод будет вызываться моделью, т.к. только она получает данные.
Пришло время создать модель.
1. Создай класс Model в пакете model.
2. Добавь два приватных поля - 1) вью, 2) массив провайдеров (аргумент переменной длинны - varargs).
3. Создай конструктор с двумя параметрами - 1) вью, 2) массив провайдеров.
На неправильные данные кинь IllegalArgumentException.
4. Создай публичный метод void selectCity(String city).
5. Реализуй логику метода selectCity:
5.1. получить вакансии с каждого провайдера,
5.2. обновить вью списком вакансий из п.5.1.

Требования:

•	Создай класс Model в пакете model.

•	В классе Model добавь два приватных поля: вью и массив провайдеров.

•	Создай конструктор с двумя параметрами: вью и массив провайдеров (аргумент переменной длинны - varargs). На неправильные данные кинь IllegalArgumentException.

•	В класс Model добавь метод public void selectCity(String city).

•	Реализуй логику метода selectCity(String). Он должен получать вакансии с каждого провайдера и передавать их все в метод update у вью.

8.11.   В Model есть метод selectCity, в него передается название города, для которого выбираются вакансии.
Очевидно, что этот метод будет вызываться контроллером, т.к. он принимает решение, какую модель использовать.
1. Добавь в Controller новое приватное поле Model model.
2. Удали метод scan() из Controller, его логика переместилась в модель.
3. Удали конструктор, toString и поле providers из контроллера.
4. Создай конструктор в Controller с аргументом Model.
На некорректные данные брось IllegalArgumentException
5. В Controller создай публичный метод void onCitySelect(String cityName), в котором вызови нужный метод модели.
6. Удали код из метода main. Этот код уже не валидный.

Требования:

•	В классе Controller добавь новое приватное поле Model model.

•	Удали из Controller метод scan, метод toString, конструктор и поле providers.

•	Добавь в Controller новый конструктор с аргументом Model. На некорректные данные брось IllegalArgumentException.

•	Создай в Controller публичный метод void onCitySelect(String cityName), в котором вызови нужный метод модели.

•	Удали старый код из метода main.









8.12.   Чтобы запустить приложение, нужно эмулировать событие пользователя:
1. В классе HtmlView создай публичный метод void userCitySelectEmulationMethod().
Пусть этот метод пробросит вызов в контроллер для города "Odessa".
2. Чтобы понять, что все работает, выведи что-то в консоль в методе update в HtmlView, например, количество вакансий.
Это будет флаг, что можно двигаться дальше.
3. Для запуска нужно еще обновить метод main в Aggregator.
3.1. Создай вью, модель, контроллер. Переменная для вью должна быть типа HtmlView. Модели нужен минимум один провайдер.
3.2. Засэть во вью контроллер.
3.3. Вызови у вью метод userCitySelectEmulationMethod.
4. Запускай приложение! Подожди несколько секунд, чтобы выгреблись данные.
Работает? Отлично, что работает!

Требования:

•	В классе HtmlView создай и реализуй публичный метод void userCitySelectEmulationMethod() согласно заданию.

•	В классе HtmlView в метод update добавь вывод количества вакансий в консоль.

•	Реализуй метод main согласно заданию и проверь, работает ли приложение как положено.






8.13.   Смотри, в пакете view появились два новых файла:
vacancies.html - будешь в него записывать данные,
backup.html - дубликат vacancies.html для восстановления, вдруг данные в vacancies.html сотрутся.
Стань слева в дереве проекта на vacancies.html, нажми правой клавишей мыши, далее "Open in Browser".
Так будешь смотреть результат своего парсинга.
Пора заняться отображением вакансий.
1. В методе update класса HtmlView реализуй следующую логику:
1.1. сформируй новое тело файла vacancies.html, которое будет содержать вакансии,
1.2. запиши в файл vacancies.html его обновленное тело,
1.3. Все исключения должны обрабатываться в этом методе - выведи стек-трейс, если возникнет исключение.
2. Для реализации п.1 создай два пустых private метода:
String getUpdatedFileContent(List<Vacancy>), void updateFile(String),
Реализовывать их логику будем в следующих заданиях.
3. Чтобы добраться до файла vacancies.html, сформируй относительный путь к нему.
В классе HtmlView создай приватное строковое final поле filePath, присвой ему относительный путь к vacancies.html.
Путь должен быть относительно корня проекта.
Формируй путь динамически используя this.getClass().getPackage() и разделитель "/".
Подсказка: путь должен начинаться с "./4.JavaCollections/src/".

Требования:

•	В классе HtmlView создай пустой приватный метод String getUpdatedFileContent(List<Vacancy>).

•	В классе HtmlView создай пустой приватный метод void updateFile(String).

•	С помощью созданных методов реализуй логику update согласно заданию.

•	В классе HtmlView создай приватное строковое final поле filePath и присвой ему относительный путь к vacancies.html.



8.14.   В классе HtmlView остались два пустых метода.
В этом задании я опишу, что должен делать метод updateFile. А также расскажу, как можно дебажить.
Он принимает тело файла в виде строки. Нужно его записать в файл, который находится по пути filePath.
Ты это хорошо умеешь делать, поэтому подробностей тут не будет.
Теперь - как дебажить.
Поставь breakpoint, запусти в дебаг моде.
нажми Alt+F8 (Run -> Evaluate Expression).
В выражении (верхняя строка) напиши System.out.println("AAA") и нажми Alt+V (снизу кнопка Evaluate).
Перейди в окно консоли, там вывелось "AAA".
Используя это окно ты можешь смотреть текущие данные, заменять их на другие, нужные тебе.
Можешь выполнять все, что хочешь. Например, удалить все элементы мапы, изменить значение любой переменной, присвоить новое значение либо обнулить ее.
Поставь брекпоинт в Controller.onCitySelect, запусти в дебаг моде.
Остановились на этом брекпоинте? Отлично, жми Alt+F8, сверху в строке cityName = "junior";
далее жми Alt+V и F9, чтобы продолжить работу приложения.
Список вакансий, который пришел в HtmlView.update, выполнялся для запроса "java junior".
Используй окно Expression Evaluation, думаю, оно тебе понадобится в следующем пункте.

Требования:

•	В классе HtmlView в методе updateFile открой поток для записи в файл.

•	Запиши в файл данные, которые метод updateFile получает аргументом.

•	Закрой поток записи в файл.






8.15.   В классе HtmlView остался один пустой метод getUpdatedFileContent(). В этом задании я опишу, что он должен делать.
1. В HtmlView создай protected метод Document getDocument() throws IOException, в котором
распарси файл vacancies.html используя Jsoup. Кодировка файла "UTF-8", используй поле filePath.
2. В методе getUpdatedFileContent() получи элементы, у которых есть класс "template".
Сделай копию этого объекта, удали из нее атрибут "style" и класс "template".
Получи первый элемент и используй его в качестве шаблона для добавления новой строки в таблицу вакансий.
3. Удали все добавленные ранее вакансии. У них единственный класс "vacancy".
В файле backup.html это одна вакансия - Junior Java Developer.
Нужно удалить все теги tr, у которых class="vacancy".
Но тег tr, у которого class="vacancy template", не удаляй.
Используй метод remove.
4. В цикле для каждой вакансии полученной как параметр метода:
4.1. склонируй шаблон тега, полученного в п.2. Метод clone.
4.2. получи элемент, у которого есть класс "city". Запиши в него название города из вакансии.
4.3. получи элемент, у которого есть класс "companyName". Запиши в него название компании из вакансии.
4.4. получи элемент, у которого есть класс "salary". Запиши в него зарплату из вакансии.
4.5. получи элемент-ссылку с тегом a. Запиши в него название вакансии(title). Установи реальную ссылку на вакансию вместо href="url".
4.6. добавь outerHtml элемента, в который ты записывал данные вакансии,
непосредственно перед шаблоном <tr class="vacancy template" style="display: none">
5. Верни html код всего документа в качестве результата работы метода.
6. В случае возникновения исключения, выведи его стек-трейс и верни строку "Some exception occurred".
7. Запусти приложение, убедись, что все вакансии пишутся в файл vacancies.html.

Требования:

•	В классе HtmlView добавь метод protected Document getDocument() в котором распарси файл vacancies.html используя Jsoup.

•	Реализуй метод getUpdatedFileContent(). Для начала, получи распарсеную страницу с помощью метода getDocument().

•	Получи элемент, у которого есть класс template. Сделай копию этого объекта, удали из нее атрибут "style" и класс "template".

•	Удали из страницы все добавленные ранее вакансии с классом "vacancy". Элемент с классом "vacancy template" должен остаться.

•	Перед объектом template для каждой вакансии добавь на страницу отдельный html-элемент, используя копию template. Верни html-код всей страницы в качестве результата работы метода.

•	Для каждой вакансии должен быть корректно заполнен элемент-ссылка с названием вакансии(title) и http-ссылкой на нее(href).

•	Для каждой вакансии должен быть корректно заполнен элемент с классом "city".

•	Для каждой вакансии должен быть корректно заполнен элемент с классом "companyName".

•	Для каждой вакансии должен быть корректно заполнен элемент с классом "salary".

•	В случае возникновения исключения, выведи его стек-трейс и верни строку "Some exception occurred".









8.16.   Ты молодец, большая работа позади! Теперь тебе легко будет мониторить вакансии для трудоустройства :)
Сейчас Aggregator использует только одну стратегию сбора вакансий - с ХэдХантера.
1. По аналогии с HHStrategy добавь стратегию для Хабр Карьеры.
Назови класс HabrCareerStrategy, реализуй метод getVacancies().
Вот тебе пример ссылки:
https://career.habr.com/vacancies?q=java+Dnepropetrovsk
Пример ссылки на вакансию:
https://career.habr.com/vacancies/1000061222
2. В методе main создай провайдер для HabrCareerStrategy. Передай этот провайдер в конструктор Model.
Это удобно сделать, т.к. модель принимает много провайдеров.
Остальную логику менять не нужно. Видишь, как легко расширять функционал?
От правильной архитектуры зависит многое.
ВНИМАНИЕ: ОСОБЕННОСТИ ТЕСТИРОВАНИЯ!
HTML код странички c вакансиями с Хабр Карьеры, как и ХэдХантера, может меняться. Чтобы эта задача прошла тестирование,
при реализации задания воспользуйся закешированной версией страницы: https://javarush.ru/testdata/big28data2.html.
Это необходимо для тестирования данного задания, после его сдачи проверь работу HabrCareerStrategy на реальном сайте.

Требования:

•	В пакете model создай новый класс HabrCareerStrategy, который реализует интерфейс Strategy.

•	В классе HabrCareerStrategy добавь приватную статическую константу URL_FORMAT, по аналогии с HHStrategy.

•	В классе HabrCareerStrategy создай protected метод getDocument(String searchString, int page). Реализуй его по аналогии с HHStrategy.

•	Метод getVacancies класса HabrCareerStrategy должен получать содержимое страниц с помощью метода getDocument. Начни с 0 страницы.

•	Из объекта Document получи список html-элементов с вакансиями. Для каждого элемента создай объект вакансии и добавь его в возвращающий методом список.

•	Нужно последовательно обработать все страницы результатов поиска. Как только страницы с вакансиями закончатся, прерви цикл и верни список найденных вакансий.

•	У каждой вакансии должно быть заполнено поле title полученными из html-элемента данными о названии вакансии.

•	У каждой вакансии должно быть заполнено поле url полученной из html-элемента ссылкой на вакансию.

•	У каждой вакансии должно быть заполнено поле companyName полученными из html-элемента данными о компании.

•	У каждой вакансии должно быть заполнено поле siteName значением сайта, на котором вакансия была найдена.

•	Поле city у вакансии должно быть заполнено, если в html-элементе присутствовал тег с данными о городе. Иначе поле должно быть инициализировано пустой строкой.

•	Поле salary у вакансии должно быть заполнено, если в html-элементе присутствовал тег с зарплатой. Иначе поле должно быть инициализировано пустой строкой.

•	В методе main в модель добавь новый провайдер, инициализированный стратегией HabrCareerStrategy.






8.17.   Что можешь сделать самостоятельно (тестов на этот пункт нет):
1. добавить еще 100500 других сайтов для агрегирования вакансий.
Нужно всего лишь создать стратегию, а потом добавить в модель провайдер с этой стратегией.
2. отсортировать все вакансии, например, по дате создания (придется распарсить дату в полученном html).
3. создать свою вью, например, на свинге. Подменить в main HtmlView на SwingView.
Подключать либы ты уже умеешь. Сделать, чтоб запрос приходил с swing-формы.
4. собрать приложение в war-ник, развернуть Томкат, задеплоить приложение туда. Сделать, чтоб запрос приходил с браузера.
Твои достижения:
1. разобрался с паттерном Strategy,
2. разобрался с самым популярным паттерном MVC (его очень часто спрашивают на собеседовании),
3. научился парсить HTML,
4. получил опыт работы с библиотекой Jsoup,
5. научился подключать внешние либы в IDEA,
6. получил опыт работы с внешними библиотеками,
7. написал крутую архитектуру,
8. стал больше знать и уметь,
9. увидел, как раскладывать задачу на подзадачи,
10. продвинулся на шаг ближе к работе джава программистом.
Поздравляю! Я горжусь тобой!
Ты мой идеальный ученик!

Требования:

•	Поздравляю! Агрегатор вакансий готов.
